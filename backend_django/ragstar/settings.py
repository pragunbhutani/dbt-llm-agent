"""
Django settings for ragstar_django project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os  # Import os for environment variables
import sys  # Add this line
import dj_database_url  # Add this import
from typing import Optional
from datetime import timedelta
import logging
import pytz
from datetime import datetime
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Add the 'apps' directory to the Python path
# Add these lines
sys.path.insert(0, str(BASE_DIR / "apps"))
# --- End of Added Lines ---


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-i7l&cnk2eemm1e!13kew37c=ctkpa2!0ufw)v&9vlwzqolq(y="

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    ".ngrok-free.app",
    "127.0.0.1",
    "localhost",
    "backend-django",
    "frontend-nextjs",
]

# Add APP_HOST from environment variables (or derive from NEXTAUTH_URL)
APP_HOST = os.environ.get("APP_HOST")

if not APP_HOST:
    NEXTAUTH_URL_ENV = os.environ.get("NEXTAUTH_URL")
    if NEXTAUTH_URL_ENV:
        try:
            parsed_url = urlparse(NEXTAUTH_URL_ENV)
            APP_HOST = parsed_url.hostname
        except Exception:
            APP_HOST = None

if APP_HOST:
    ALLOWED_HOSTS.append(APP_HOST)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "pgvector.django",
    "django_extensions",
    # "django_cryptography",
    # Use full AppConfig paths
    "apps.accounts.apps.AccountsConfig",
    "apps.data_sources.apps.DataSourcesConfig",
    "apps.knowledge_base.apps.KnowledgeBaseConfig",
    "apps.embeddings.apps.EmbeddingsConfig",
    "apps.llm_providers.apps.LlmProvidersConfig",
    "apps.workflows.apps.WorkflowsConfig",
    "apps.integrations.apps.IntegrationsConfig",
]

AUTH_USER_MODEL = "accounts.User"

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "ragstar.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ragstar.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE_URL_FROM_ENV = os.environ.get("DATABASE_URL")

if DATABASE_URL_FROM_ENV:
    DATABASES = {
        "default": dj_database_url.config(
            default=DATABASE_URL_FROM_ENV,
            conn_max_age=600,
            ssl_require=os.environ.get("DB_SSL_REQUIRE", "false").lower() == "true",
        )
    }
else:
    # Fallback for local development if DATABASE_URL is not set
    # (e.g., when running manage.py directly without Docker Compose)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("DB_NAME_FALLBACK", "ragstar_local_dev"),
            "USER": os.environ.get("DB_USER_FALLBACK", "postgres"),
            "PASSWORD": os.environ.get("DB_PASSWORD_FALLBACK", "password"),
            "HOST": os.environ.get("DB_HOST_FALLBACK", "localhost"),
            "PORT": os.environ.get("DB_PORT_FALLBACK", "5432"),
        }
    }


# Celery Configuration
# ------------------------------------------------------------------------------
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"  # Will be updated after TIME_ZONE is determined


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

# Auto-detect system timezone, fallback to UTC if detection fails
import time

try:
    # Get system timezone
    if hasattr(time, "tzname") and time.tzname:
        # Use system timezone name
        TIME_ZONE = os.environ.get("TZ") or time.tzname[0] or "UTC"
    else:
        TIME_ZONE = os.environ.get("TZ", "UTC")
except:
    TIME_ZONE = "UTC"

# For better timezone handling, let's use a more reliable method
import zoneinfo
import datetime

try:
    # Get the system's local timezone
    local_tz = datetime.datetime.now().astimezone().tzinfo
    if hasattr(local_tz, "key"):
        TIME_ZONE = local_tz.key
    else:
        # Fallback to environment variable or UTC
        TIME_ZONE = os.environ.get("TZ", "UTC")
except:
    TIME_ZONE = os.environ.get("TZ", "UTC")

USE_I18N = True

USE_TZ = True

# Update Celery timezone to match Django timezone
CELERY_TIMEZONE = TIME_ZONE


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# --- Ragstar / LLM Settings ---

# --- LLM Provider Configuration ---
# These settings are primarily controlled by environment variables.
# Example environment variable names are suggested in comments.

# API Keys (from corresponding ENV variables like LLM_OPENAI_API_KEY_ENV)
LLM_OPENAI_API_KEY = os.environ.get("LLM_OPENAI_API_KEY")
LLM_GOOGLE_API_KEY = os.environ.get("LLM_GOOGLE_API_KEY")
LLM_ANTHROPIC_API_KEY = os.environ.get("LLM_ANTHROPIC_API_KEY")

# MCP OAuth Configuration
MCP_AUTHORIZATION_BASE_URL = os.environ.get(
    "MCP_AUTHORIZATION_BASE_URL", "http://localhost:8000"
)

# Chat Provider and Model
LLM_CHAT_PROVIDER_NAME = os.environ.get("LLM_CHAT_PROVIDER_NAME", "openai").lower()
LLM_CHAT_MODEL = os.environ.get("LLM_CHAT_MODEL", "o4-mini")  # Default to OpenAI model

# Embeddings Provider and Model
LLM_EMBEDDINGS_PROVIDER_NAME = os.environ.get(
    "LLM_EMBEDDINGS_PROVIDER_NAME", "openai"
).lower()
LLM_EMBEDDINGS_MODEL = os.environ.get(
    "LLM_EMBEDDINGS_MODEL", "text-embedding-3-small"
)  # Default to OpenAI model

# Optional Chat Configuration
LLM_CHAT_CONFIG_TEMPERATURE_STR = os.environ.get("LLM_CHAT_CONFIG_TEMPERATURE")
LLM_CHAT_CONFIG_TEMPERATURE: Optional[float] = None
if LLM_CHAT_CONFIG_TEMPERATURE_STR:
    try:
        LLM_CHAT_CONFIG_TEMPERATURE = float(LLM_CHAT_CONFIG_TEMPERATURE_STR)
    except ValueError:
        # Using logger here might be problematic if logging isn't fully configured yet.
        # print is safer at this stage of settings.py
        print(
            f"WARNING: Invalid LLM_CHAT_CONFIG_TEMPERATURE value: '{LLM_CHAT_CONFIG_TEMPERATURE_STR}'. Using default temperature."
        )


# --- Centralized Verbosity Control ---
# Define the log level for RAGstar application components.
# Controlled by the SETTINGS_LOG_LEVEL environment variable.
# Valid values: "DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"
SETTINGS_LOG_LEVEL_ENV = os.environ.get("SETTINGS_LOG_LEVEL", "INFO").upper()
# Ensure the level is one of the valid logging levels, default to INFO if invalid.
VALID_LOG_LEVELS = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
RAGSTAR_LOG_LEVEL = (
    SETTINGS_LOG_LEVEL_ENV if SETTINGS_LOG_LEVEL_ENV in VALID_LOG_LEVELS else "INFO"
)


# --- Logging Configuration ---
# Add this towards the end of your settings.py file
# (After other settings like DATABASES, OPENAI_API_KEY, etc.)

# Add REST_FRAMEWORK settings for JWT
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    )
}

# Simple JWT Configuration
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
}


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # Keep Django's default loggers
    "formatters": {
        "verbose": {
            # Include timestamp, level, logger name, and message
            "format": "{levelname} {asctime} {name} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "colored": {  # Add this formatter
            "()": "coloredlogs.ColoredFormatter",
            # Updated format string for better readability
            "format": "%(asctime)s [%(levelname)-8s] %(name)s:%(funcName)s:%(lineno)d - %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
            "field_styles": {
                "asctime": {"color": "green"},
                "hostname": {"color": "magenta"},
                "levelname": {"color": "black", "bold": True},
                "name": {"color": "blue"},
                "programname": {"color": "cyan"},
                "username": {"color": "yellow"},
                # Add styles for new fields if desired
                "funcName": {"color": "cyan"},
                "lineno": {"color": "magenta"},
            },
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",  # Handler processes all messages DEBUG and above
            "class": "logging.StreamHandler",
            "formatter": "colored",  # Change this from 'verbose' to 'colored'
        },
    },
    "loggers": {
        "": {  # Root logger - controls default level via runserver -v
            "handlers": ["console"],
            # We will now control application loggers more directly with RAGSTAR_LOG_LEVEL
            "level": "INFO",  # Keep root logger at INFO unless Django overrides via -v
        },
        "django": {  # Control Django framework logs
            "handlers": ["console"],
            "level": "INFO",  # Avoid excessive Django internal logs unless needed
            "propagate": False,  # Don't pass to root logger
        },
        "django.request": {  # Specific handler for request errors
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.db.backends": {  # Control SQL query logging
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "core": {  # Logger for your 'core' application
            "handlers": ["console"],
            "level": RAGSTAR_LOG_LEVEL,  # Use centralized log level
            "propagate": False,
        },
        "apps.workflows": {  # Logger for the workflows app
            "handlers": ["console"],
            "level": RAGSTAR_LOG_LEVEL,  # Use centralized log level
            "propagate": False,
        },
        "apps.llm_providers": {  # Logger for llm_providers
            "handlers": ["console"],
            "level": RAGSTAR_LOG_LEVEL,
            "propagate": False,
        },
        "apps.data_sources": {  # Logger for data_sources
            "handlers": ["console"],
            "level": RAGSTAR_LOG_LEVEL,
            "propagate": False,
        },
    },
}

# --- Custom Settings ---

# Verbosity level for Agents triggered via Admin actions
# 0 = WARNING/ERROR, 1 = INFO, 3 = DEBUG
# AGENT_DEFAULT_VERBOSITY = 3 # Removed, will be derived from RAGSTAR_LOG_LEVEL

INTEGRATIONS_SLACK_SIGNING_SECRET = os.environ.get("INTEGRATIONS_SLACK_SIGNING_SECRET")
INTEGRATIONS_SLACK_BOT_TOKEN = os.environ.get("INTEGRATIONS_SLACK_BOT_TOKEN")

# CORS Configuration
FRONTEND_URL = os.environ.get("FRONTEND_URL", "http://localhost:3000")

CORS_ALLOWED_ORIGINS = [
    FRONTEND_URL,
    "http://localhost:3000",  # Explicit local development
    "http://127.0.0.1:3000",  # Alternative localhost
]

# Add APP_HOST-based origin if APP_HOST is set
if APP_HOST:
    CORS_ALLOWED_ORIGINS.append(f"http://{APP_HOST}:3000")

# Add NEXTAUTH_URL to CORS origins if it exists (strip trailing slash)
NEXTAUTH_URL = os.environ.get("NEXTAUTH_URL")
if NEXTAUTH_URL:
    CORS_ALLOWED_ORIGINS.append(NEXTAUTH_URL.rstrip("/"))

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://.*\.ngrok-free\.app$",
    r"^https://.*\.vercel\.app$",  # For Vercel deployments
]

CSRF_TRUSTED_ORIGINS = [
    FRONTEND_URL,
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Add APP_HOST-based origin if APP_HOST is set
if APP_HOST:
    CSRF_TRUSTED_ORIGINS.append(f"http://{APP_HOST}:3000")

# Add NEXTAUTH_URL to CSRF trusted origins if it exists (strip trailing slash)
if NEXTAUTH_URL:
    CSRF_TRUSTED_ORIGINS.append(NEXTAUTH_URL.rstrip("/"))

# CORS Security Settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False  # Be explicit about not allowing all origins

# Allowed headers for CORS requests
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Allowed methods for CORS requests
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
